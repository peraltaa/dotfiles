;; -*- mode:lisp -*-

(use-package :lem-user)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Looks 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define-color-theme "xcode" ()
  (:display-background-mode :light)
  (:foreground "#000000")
  (:background "#ffffff")
  (:inactive-window-background nil)
  (cursor :foreground "#ffffff" :background "#000000")
  (region :foreground nil :background "#FFFFFF")
  (modeline :background "grey" :foreground "white")
  (modeline-inactive :background "#303030" :foreground "gray")
  (syntax-string-attribute :foreground "#d70000")
  (syntax-comment-attribute :foreground "#008000")
  (syntax-keyword-attribute :foreground "#af0087")
  (syntax-constant-attribute :foreground "#ff00ff")
  (syntax-function-name-attribute :foreground "#A4CDFF")
  (syntax-variable-attribute :foreground "#ffffff")
  (syntax-type-attribute :foreground nil :background "#ffffff"))

(define-color-theme "xcode-dark" ("xcode")
  (:display-background-mode :dark)
  (:foreground "#ffffff")
  (:background "#202020")
  (cursor :foreground "#202020" :background "#FFFFFF")
  (region :foreground "#FFFFFF" :background "#343434")
  (modeline :bold t :background "#292929" :foreground "#FFFFFF")
  (modeline-inactive :bold t :background "#383838" :foreground "white")
  (lem-core::modeline-name-attribute :foreground "#5DD8FF")
  (lem-core::inactive-modeline-name-attribute :foreground "#5d6dff")
  (lem-core::modeline-major-mode-attribute :foreground "#5DD8FF")
  (lem-core::inactive-modeline-major-mode-attribute :foreground "#5d6dff")
  (lem-vi-mode/modeline::state-modeline-yellow :foreground "grey" :reverse t)
  (lem-vi-mode/modeline::state-modeline-orange :foreground "#41B645" :reverse t)
  (lem-vi-mode/modeline::state-modeline-green :foreground "#A2E474" :reverse t)
  (syntax-string-attribute :foreground "#FC6A5D")
  (syntax-comment-attribute :foreground "#6C7986")
  (syntax-keyword-attribute :foreground "#FC5FA3")
  (syntax-constant-attribute :foreground "#A167E6")
  (syntax-function-name-attribute :foreground "#67B7A4")
  (syntax-variable-attribute :foreground "#67B7A4")
  (syntax-type-attribute :foreground "#9EF1DD"))

(load-library "lem-pygments-colorthemes")
(load-theme "xcode-dark")
;; (load-theme "monokai")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Vars 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(setf *scroll-recenter-p* t)
;; (setf (variable-value 'truncate-lines                :global) nil)
(setf (variable-value 'lem/line-numbers:line-numbers :global) t)
(setf lem:*auto-format* t)

;; Prompt-Window Location

(setf lem-core::*default-prompt-gravity* :bottom-display)
(setf lem/prompt-window::*prompt-completion-window-gravity* :horizontally-above-window)
(setf lem-lisp-mode/completion::*documentation-popup-gravity* :bottom-display)


;; ## imenu

;; A very poor man's imenu.
(defun buffer-headings (txt)
  (loop for line in (str:lines txt)
        for parts = (str:split " " line)
        for i = 1 then (incf i)
        if (str:starts-with-p "(def" line)
        ; collect (list line i))
        collect line))

(defun prompt-for-heading ()
  (let ((candidates (buffer-headings (buffer-text (current-buffer)))))
    (if candidates
        (prompt-for-string "Heading: "
                           :history-symbol '*imenu*
                           :completion-function (lambda (x)
                                                  (completion-strings x candidates))
                           :test-function (lambda (name)
                                            (member name candidates :test #'string=))))))

(define-command imenu () ()
  (let ((candidate (prompt-for-heading)))
    (move-to-beginning-of-buffer)
    (search-forward (current-point) candidate)
    (message "~a" candidate)))

(define-key lem-vi-mode:*normal-keymap* "Space x i" 'imenu)

(setf lem/prompt-window::*fill-width* t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Init Modes 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; VI
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Keybindings
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; VI
(define-key lem-vi-mode:*normal-keymap* "q"  'quit-active-window)
(define-key lem-vi-mode:*normal-keymap* "Space f f" 'lem:find-file)
(define-key lem-vi-mode:*normal-keymap* "Space b b" 'lem:select-buffer)
(define-key lem-vi-mode:*normal-keymap* "Space w h" 'lem:window-move-left)
(define-key lem-vi-mode:*normal-keymap* "Space w l" 'lem:window-move-right)
(define-key lem-vi-mode:*normal-keymap* "Space w k" 'lem:window-move-up)
(define-key lem-vi-mode:*normal-keymap* "Space w j" 'lem:window-move-down)
(define-key lem-vi-mode:*normal-keymap* "Space w c" 'lem:delete-active-window)
(define-key lem-vi-mode:*normal-keymap* "Space w s" 'lem:split-active-window-vertically)
(define-key lem-vi-mode:*normal-keymap* "Space w v" 'lem:split-active-window-horizontally)
(define-key lem-vi-mode:*normal-keymap* "Space e e" 'lem-lisp-mode:lisp-eval-last-expression)
(define-key lem-vi-mode:*normal-keymap* "Space e f" 'lem-lisp-mode:lisp-load-file)
(lem-vi-mode:vi-mode)


;; Start the Lisp REPL in vi insert mode. - Probably should create pull request for this
(add-hook lem-lisp-mode:*lisp-repl-mode-hook* 'lem-vi-mode/commands:vi-insert)